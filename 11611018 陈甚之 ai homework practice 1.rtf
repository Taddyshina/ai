{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red242\green242\blue242;\red0\green0\blue0;\red193\green101\blue28;
\red45\green150\blue30;\red49\green139\blue238;\red194\green0\blue255;\red47\green180\blue29;\red0\green0\blue0;
\red161\green207\blue206;}
{\*\expandedcolortbl;;\csgray\c95825;\csgray\c0\c85000;\cssrgb\c80554\c47367\c13835;
\cssrgb\c20460\c63761\c15350;\cssrgb\c23654\c62457\c94777;\cssrgb\c81453\c23169\c100000;\cssrgb\c20239\c73899\c14948;\csgray\c0;
\cssrgb\c68627\c84314\c84314;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs20 \cf2 \cb3 \CocoaLigature0 1,fruits=[\cf4 "apple"\cf2 ,\cf4 "pear"\cf2 ,\cf4 "orange"\cf2 ,\cf4 "pineapple"\cf2 ,\cf4 "mandarin"\cf2 ]\
2,\cf5 def\cf2  \cf6 is_apple\cf2 (fruits):\
\cf5     ...: \cf2     \cf5 if\cf2  fruits == \cf4 "apple"\cf2 :\
\cf5     ...: \cf2         \cf5 return\cf2  \cf4 "I found it!"\
\cf5  for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (fruits)):\
\cf5     ...: \cf2     \cf5 print\cf2 (is_apple(fruits[i]))\
3,fruits.append(\cf4 "banana"\cf2 )\
  fruits.append(\cf4 "kiwi"\cf2 )\
4,\cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (fruits)):\
\cf5     ...: \cf2     apple_name_length.append(\cf5 str\cf2 (fruits[i])+\cf4 " has "\cf2 +\cf5 str\cf2 (\cf5 len\cf2 (fruits[i]))+\cf4 "\cf2 \
\cf5     ...:  \cf4 letters"\cf2 )\
\cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (apple_name_length)):\
\cf5          print\cf2 (apple_name_length[i]) \
5,\cf8 import\cf2  numpy\
\cf5   def\cf2  \cf6 half_squared\cf2 (\cf5 list\cf2 ):\
\cf5     ...: \cf2     results=[]\
\cf5     ...: \cf2     \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (\cf5 list\cf2 )):\
\cf5     ...: \cf2         results.append(\cf5 str\cf2 (numpy.square(\cf5 list\cf2 [i])/\cf5 2\cf2 ))\
\cf5     ...: \cf2     \cf5 return\cf2  results\
\cf5   \cf2 half_squared([\cf5 3\cf2 ,\cf5 3\cf2 ])\
6,a = \cf5 int\cf2 (\cf5 input\cf2 (\cf4 "input scores : "\cf2 )\
\cf5     ...: if\cf2 (a >=\cf5 90\cf2 ):   \
\cf5     ...: print\cf2 (\cf4 "A"\cf2 )                    \
\cf5     ...: if\cf2 (a>\cf5 100\cf2  |a<\cf5 0\cf2 ):                                     \
\cf5     ...: print\cf4 "error!"\cf2      \
\cf5     ...: if\cf2 (a<\cf5 60\cf2 ):          \
\cf5     ...: print\cf2 (\cf4 "C"\cf2 )\
\cf5     ...: if\cf2 (a>=\cf5 60\cf2 &a<=\cf5 89\cf2 ):\
\cf5     ...: print\cf2 (\cf4 "B"\cf2 )\
7,\cf5 def\cf2  \cf6 revsort\cf2 (a,b,c):    \
\cf5     ...: \cf2     result=[]\
\cf5     ...: \cf2     \cf5 if\cf2  (a>=b):\
\cf5     ...: \cf2         d=a\
\cf5     ...: \cf2         e=b\
\cf5     ...: \cf2     \cf5 else\cf2 :\
\cf5     ...: \cf2         d=b\
\cf5     ...: \cf2         e=a\
\cf5     ...: \cf2     \cf5 if\cf2 (d>=c):\
\cf5     ...: \cf2         \cf5 if\cf2 (e>=c):\
\cf5     ...: \cf2             result.append(d)\
\cf5     ...: \cf2             result.append(e)\
\cf5     ...: \cf2             result.append(c)\
\cf5     ...: \cf2         \cf5 else\cf2 :\
\cf5     ...: \cf2             result.append(d)\
\cf5     ...: \cf2             result.append(c)\
\cf5     ...: \cf2             result.append(e)\
\cf5     ...: \cf2     \cf5 else\cf2 :\
\cf5     ...: \cf2         result.append(c)\
\cf5     ...: \cf2         result.append(d)\
\cf5     ...: \cf2         result.append(e)\
\cf5     ...: \cf2     \cf5 return\cf2  result\
\cf5 print\cf2 (revsort(\cf5 12\cf2 ,\cf5 4\cf2 ,\cf5 32\cf2 ))\
8,\cf5 def\cf2  \cf6 f\cf2 (x):\
\cf5     ...: \cf2     list1=x[\cf5 0\cf2 ]\
\cf5     ...: \cf2     list2=x[\cf5 1\cf2 ]\
\cf5     ...: \cf2     \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (list2)):\
\cf5     ...: \cf2         list1.append(list2[i])\
\cf5     ...: \cf2     \cf5 return\cf2  list1\
   list1 = [\cf5 1\cf2 ,\cf5 2\cf2 ,\cf5 3\cf2 ]\
\cf5     ...: \cf2 list2 = [\cf5 4\cf2 ,\cf5 5\cf2 ,\cf5 6\cf2 ]\
\cf5     ...: \cf2 array = [list1,list2]\
   f(array) \
9,\cf5  def\cf2  \cf6 f\cf2 (x):\
\cf5      ...: \cf2     list1=[]\
\cf5      ...: \cf2     n=x**\cf5 3\cf2 \
\cf5      ...: \cf2     \cf5 while\cf2  (n>\cf5 0\cf2 ):\
\cf5      ...: \cf2         list1.append(n%\cf5 10\cf2 )\
\cf5      ...: \cf2         n=\cf5 int\cf2 (n/\cf5 10\cf2 )\
\cf5      ...: \cf2     result=\cf5 sum\cf2 (list1)\
\cf5      ...: \cf2     \cf5 if\cf2 (result==x):\
\cf5      ...: \cf2         \cf5 return\cf2  x\
\cf5      ...: \cf2     \cf5 else\cf2 :\
\cf5      ...: \cf2         \cf5 return\cf2  \cf4 ""\
\cf5  for\cf2  i \cf7 in\cf2  \cf5 map\cf2 (f,\cf5 range\cf2 (\cf5 1\cf2 ,\cf5 101\cf2 )):\
\cf5      ...: \cf2     \cf5 print\cf2 (i)\
10,\cf5 import\cf2  \cf6 random\cf2 \
   x=random.randint(\cf5 1\cf2 ,\cf5 10\cf2 )\
\cf5   \cf2  y=random.randint(\cf5 1\cf2 ,\cf5 10\cf2 )\
\cf5    \cf2 c=x\
\cf5   \cf2  x=y\
\cf5   \cf2  y=c\
\cf5   \cf2  \cf5 print\cf2 (\cf5 str\cf2 (x)+\cf4 ","\cf2 +\cf5 str\cf2 (y))\
11,\cf5 def\cf2  \cf6 f\cf2 (n):                            \
\cf5      ...: \cf2     x=\cf5 1\cf2                               \
\cf5      ...: \cf2     \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((n-\cf5 1\cf2 )/\cf5 2\cf2 )):    \
\cf5      ...: \cf2         list1=[]                     \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((n-x)/\cf5 2\cf2 )):\
\cf5      ...: \cf2             list1.append(\cf4 " "\cf2 )        \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (x):           \
\cf5      ...: \cf2             list1.append(\cf4 "*"\cf2 )        \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((n-x)/\cf5 2\cf2 )):\
\cf5      ...: \cf2             list1.append(\cf4 " "\cf2 )\
\cf5      ...: \cf2         x=x+\cf5 2\cf2             \
\cf5      ...: \cf2         \cf5 print\cf2 (list1)     \
\cf5      ...: \cf2         list1=[]                 \
\cf5      ...: \cf2     \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (n):           \
\cf5      ...: \cf2         list1.append(\cf4 "*"\cf2 )            \
\cf5      ...: \cf2     \cf5 print\cf2 (list1)                     \
\cf5      ...: \cf2     x=x+\cf5 2\cf2                             \
\cf5      ...: \cf2     \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((n-\cf5 1\cf2 )/\cf5 2\cf2 )):    \
\cf5      ...: \cf2         list1=[]                     \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((x-n)/\cf5 2\cf2 )):\
\cf5      ...: \cf2             list1.append(\cf4 " "\cf2 )        \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (n*\cf5 2\cf2 -x):       \
\cf5      ...: \cf2             list1.append(\cf4 "*"\cf2 )        \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((x-n)/\cf5 2\cf2 )):\
\cf5      ...: \cf2             list1.append(\cf4 " "\cf2 )        \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (n*\cf5 2\cf2 -x):       \
\cf5      ...: \cf2             list1.append(\cf4 "*"\cf2 )        \
\cf5      ...: \cf2         \cf5 for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 int\cf2 ((x-n)/\cf5 2\cf2 )):\
\cf5      ...: \cf2             list1.append(\cf4 " "\cf2 )        \
\cf5      ...: \cf2         x=x+\cf5 2\cf2                         \
\cf5      ...: \cf2         \cf5 print\cf9 \cb10 (\cf2 \cb3 list1\cf9 \cb10 )\cf2 \cb3                  \
12,x=[]\
\cf5      ...: for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 1\cf2 ,\cf5 7\cf2 ):\
\cf5      ...: \cf2     \cf5 for\cf2  j \cf7 in\cf2  \cf5 range\cf2 (i,\cf5 7\cf2 ):\
\cf5      ...: \cf2         \cf5 print\cf2 (j,end=\cf4 " "\cf2 )\
\cf5      ...: \cf2     \cf5 for\cf2  f \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (x)):\
\cf5      ...: \cf2         \cf5 print\cf2 (x[f],end=\cf4 " "\cf2 )\
\cf5      ...: \cf2     \cf5 print\cf2 ()\
\cf5      ...: \cf2     x.append(i)\
13,players = [\cf4 'charles'\cf2 ,\cf4 'martina'\cf2 ,\cf4 'michael'\cf2 ,\cf4 'florence'\cf2 ,\cf4 'eli'\cf2 ]\
\cf5    for\cf2  i \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (players)):\
\cf5      ...: \cf2     \cf5 for\cf2  list1 \cf7 in\cf2  players[i]:\
\cf5      ...: \cf2         \cf5 for\cf2  j \cf7 in\cf2  \cf5 range\cf2 (\cf5 len\cf2 (list1)):\
\cf5      ...: \cf2             \cf5 print\cf2 (\cf5 str\cf2 .capitalize(list1[j]),end=\cf4 ""\cf2 )\
\cf5      ...: \cf2     \cf5 print\cf2 (\cf4 ","\cf2 ,end=\cf4 ""\cf2 )\
}